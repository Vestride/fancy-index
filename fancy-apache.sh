#! /bin/bash
#####################################
#       CONSTANT DECLARATION        #
#####################################
GIT_REPO="https://github.com/Vestride/fancy-index"
GIT_BRANCH="main"

APACHE2_CONF="apache2.conf"
APACHE2_CONF_ALT="httpd.conf"
APACHE2_SITES_AVAILABLE_FOLDER="sites-available"
APACHE2_DOCUMENT_ROOT_INSTRUCTION="DocumentRoot"

FANCY_INDEX_HTACCESS_FILENAME=".htaccess"

#####################################
#       FUNCTION DECLARATION        #
#####################################
function onInstallationFound {
    echo "Fancy-index installation found!"
    i=5
    trap 'cancelUpdateCheck i' INT
    while [ $i -gt 0 ]; do
        echo -en "Checking for updates in $i seconds... (Ctrl + C to skip)\r"
        i=$((i-1))
        sleep 1
    done
    trap - INT
}

function cancelUpdateCheck {
    local -n ref=$1
    ref=-1
    skip=1
    echo ""
    echo "Update check skipped..."
}

function cloneRepo {
    echo "Obtaining files from ${GIT_REPO}..."
    git clone --quiet $1 $2
    echo "Obtained files successfully!"
}

function pullRepo {
    echo "Updating files from ${GIT_REPO}..."
    git pull --quiet $1 $2
    echo "Update successfull..."
}

function checkForUpdate {
    git --git-dir="${1}/.git" fetch origin
    UPSTREAM=${1:-'@{u}'}
    LOCAL=$(git --git-dir="${1}/.git" rev-parse $GIT_BRANCH)
    REMOTE=$(git --git-dir="${1}/.git" rev-parse "origin/${GIT_BRANCH}")
    BASE=$(git --git-dir="${1}/.git" merge-base $GIT_BRANCH "origin/${GIT_BRANCH}")
    if [ "$LOCAL" == "$REMOTE" ]; then
        result=0
    elif [ "$LOCAL" -eq "$BASE" ]; then
        result=1
    elif [ "$REMOTE" -eq "$BASE" ]; then
        result=2
    else
        result=2
    fi
    return $result
}

function obtainApacheVHost {
    wildcard_dir="${1}/${APACHE2_SITES_AVAILABLE_FOLDER}/*"
    local available_sites=($wildcard_dir)
    if [ ${#available_sites[@]} -eq 0 ]; then
        echo "No sites available for configuration!"
    else
        index="none"
        echo "==========================================================="
        for ((i=0; i<${#available_sites[@]}; i++)); do
            local fileName=$(echo "${available_sites[$i]}" | sed -e 's/.*\///')
            echo " [${i}]: ${fileName}"
        done
        echo "==========================================================="
        while [ "$index" == "none" ]; do
            read -p "Select the page to be configured (the number between []): " index
            if ! [[ $index =~ ^[0-9]+$ ]]; then
                echo "The selected page is not a valid number!"
                index="none"
            elif [ $index -ge ${#available_sites[@]} ]; then
                echo "No page with number ${index}!"
                index="none"
            else
                vhost="${available_sites[$index]}"
                echo "Starting configuration process for: ${vhost}..."
            fi
        done
    fi
}

function extractDocumentRoot {
    local tmp=$(cat $1 | grep "$APACHE2_DOCUMENT_ROOT_INSTRUCTION" | awk '{print $2}')
    if [ -z "$tmp" ]; then
        echo "Cannot extract ${APACHE2_DOCUMENT_ROOT_INSTRUCTION} instruction from ${1}. Can not continue with configuration!"
        exit
    else
        echo "Successfully extracted ${APACHE2_DOCUMENT_ROOT_INSTRUCTION} instruction."
        echo "\\----> Source: ${1}"
        echo " \\---> Value:  ${tmp}"
    fi
    documentRoot=$tmp
}

function checkCollision {
    if [ -f "${1}/${FANCY_INDEX_HTACCESS_FILENAME}" ]; then
        echo "==========================================================================================="
        echo "Detected ${FANCY_INDEX_HTACCESS_FILENAME} collision!"
        echo "The directory ${1} already contains a file with the name ${FANCY_INDEX_HTACCESS_FILENAME}!"
        echo "If you continue with the installation process the file will be overwriten!"
        echo "==========================================================================================="
        buffer=""
        while [ -z $buffer ]; do
            read -n 1 -p "Are you sure that you want to continue? [Y/N] " buffer
            if ! [[ $buffer == [YyNn] ]]; then
                echo
                echo "Please respond Y or N..."
                buffer=""
            elif [[ $buffer == [Nn] ]]; then
                echo
                echo "Operation aborted!"
                exit
            fi
        done
    fi
    echo
    echo "File collision check pass!"
}

function writeDirectoryRules {
    local text="    # Autogenerated\n    Alias \"/fancy-index\" \"$2\"\n    <Directory \"$2\">\n        AllowOverride All\n        Options Indexes MultiViews FollowSymLinks\n        Require all granted\n    </Directory>\n"
    sed -i "/^<\/VirtualHost>/i $text" $1
}

function askForApacheRestart {
    buffer=""
    while [ -z $buffer ]; do
        read -n 1 -p "Do you want to restart the Apache2 server now? [Y/N] " buffer
        if ! [[ $buffer == [YyNn] ]]; then
            echo
            echo "Please respond Y or N..."
            buffer=""
        elif [[ $buffer == [Nn] ]]; then
            echo
            echo "Run 'systemctl restart apache2' to apply changes."
        else
            echo
            echo "Restarting apache2 service..."
            systemctl restart apache2
        fi
    done
}

#####################################
#            SCRIPT START           #
#####################################

# Get installation folder
read -e -p "Fancy index installation folder (default:'/var/www/fancy-index'):" line_buffer
path=${line_buffer:-/var/www/fancy-index}

# Check if fancy-index installation exists, update, install, or skip
skip=0
if [ -d $path ]; then
    onInstallationFound
else
    cloneRepo $GIT_REPO $path
fi

# Check for fancy-index updates
if [ $skip -eq 0 ]; then
    checkForUpdate "$path"
    result=$?
else
    result=3
fi

# Perform update if needed
if [ $result == 0 ]; then
    echo "Fancy-index is up to date!"
elif [ $result == 1 ]; then
    buffer=""
    while [[ $buffer != [yYnN] ]]; do
        read -n 1 -p "A fancy-index update is available. Do you want to update fancy-index? [Y/N] " buffer
    done
    if [[ $buffer == [yY] ]]; then
        pullRepo $GIT_REPO $path
    else
        echo "Update skipped..."
    fi
elif [ $result == 2 ]; then
    echo "===================================="
    echo " ! Cannot update fancy-index!"
    echo "===================================="
fi

# Get current apache path
is_valid_apache_path=0
apache_path=""
while [ $is_valid_apache_path -eq 0 ]; do
    read -e -p "Apache2 installation folder (default:'/etc/apache2'): " line_buffer
    apache_path=$(echo ${line_buffer:-/etc/apache2} | sed 's/\/$//')
    if [ -d $apache_path ]; then
        if [ -f "${apache_path}/$APACHE2_CONF" ] || [ -f "${apache_path}/$APACHE2_CONF_ALT" ]; then
            echo "Valid apache installation folder: ${apache_path}"
            is_valid_apache_path=1
        else
            echo "The path ${apache_path} does not contain an apache installation! Not ${APACHE2_CONF} nor ${APACHE2_CONF_ALT} were found!"
        fi
    fi
done

# Extract the site to be configured
vhost=""
obtainApacheVHost $apache_path

# Extract the document root of the site
documentRoot=""
extractDocumentRoot $vhost

# Go one directory up
accessFileLocation=$(echo $documentRoot | sed 's|\(.*\)/.*|\1|')
echo "Going up one directory to ${accessFileLocation}..."

# Check for already existing files that would be overwritten
checkCollision $accessFileLocation

# Copy the access file
echo "Copying required files..."
cp "${path}/${FANCY_INDEX_HTACCESS_FILENAME}" "${accessFileLocation}/${FANCY_INDEX_HTACCESS_FILENAME}"

# Add entry to virtualhost
writeDirectoryRules $vhost $path

# Enable required modules
echo "Enabling required modules..."
a2enmod autoindex > /dev/null 2>&1

# Ask for server restart
askForApacheRestart

# Success :)
echo "Success!"
exit
